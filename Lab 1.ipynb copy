{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bike Crossing Across the Fremont Bridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "West Mode: 1\n",
      "West Median: 47\n",
      "West Mean: 73.76331360946746\n",
      "\n",
      "East Mode: FAILED -- Multiple Modes\n",
      "East Median: 53\n",
      "East Mean: 77.01183431952663\n"
     ]
    }
   ],
   "source": [
    "#File Reading\n",
    "#Emma Anderson, Big Data, 1/22/16\n",
    "#open and save the file for reading\n",
    "data_file = open(\"FreBridge.csv\", \"r\");\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import statistics\n",
    "%matplotlib inline\n",
    "\n",
    "#create an empty list to store the data\n",
    "data_list = [];\n",
    "#put all lines from the file into a list\n",
    "for ii in data_file:\n",
    "    data_list.append(ii);\n",
    "\n",
    "#remove the first element (column header)\n",
    "del data_list[0];\n",
    "\n",
    "#create empty lists for westbound and eastbound bikes\n",
    "west = [];\n",
    "east = [];    \n",
    "for jj in range(len(data_list)):\n",
    "    #strip off the \\n (newline)\n",
    "    data_list[jj] = data_list[jj].replace(\"\\n\", \"\");\n",
    "    #make into a list of lists of just numbers\n",
    "    data_list[jj] = data_list[jj].split(\",\");\n",
    "    #add data to specific lists for west and east\n",
    "    west.append(int(data_list[jj][1]));\n",
    "    east.append(int(data_list[jj][2]));\n",
    "\n",
    "#print the mean median and mode of the western crossings and the eastern crossings\n",
    "#in the case that there is no unique mode, catch the error\n",
    "try:\n",
    "    print(\"West Mode:\",statistics.mode(west))\n",
    "except:\n",
    "    print(\"West Mode: FAILED -- Multiple Modes\")\n",
    "    \n",
    "print(\"West Median:\",statistics.median(west))\n",
    "print(\"West Mean:\",statistics.mean(west))\n",
    "\n",
    "#space between data\n",
    "print()\n",
    "\n",
    "#in the case that there is no unique mode, catch the error\n",
    "try:\n",
    "    print(\"East Mode:\",statistics.mode(east))\n",
    "except:\n",
    "    print(\"East Mode: FAILED -- Multiple Modes\")\n",
    "print(\"East Median:\",statistics.median(east))\n",
    "print(\"East Mean:\",statistics.mean(east))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Based off of these results, I feel that the mean is the best representation of the data.  I feel this because due to the great range of the data points, the mean is closest to the most points, most of the time.  The mode will fail if there are two equal modes found, making it a bad representator of the data.  The medians are values that are slightly low compared to the range of the data, making this a bad representator of the data.  For this reason, I believe that the mean is the best representation of the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 69.,  44.,  23.,   9.,  12.,   2.,   1.,   2.,   2.,   5.]),\n",
       " array([   0. ,   38.3,   76.6,  114.9,  153.2,  191.5,  229.8,  268.1,\n",
       "         306.4,  344.7,  383. ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1041ce208>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot the histogram for the western crossings\n",
    "plt.hist(west)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 73.,  58.,  14.,   9.,   5.,   2.,   3.,   1.,   0.,   4.]),\n",
       " array([   0. ,   48.7,   97.4,  146.1,  194.8,  243.5,  292.2,  340.9,\n",
       "         389.6,  438.3,  487. ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10895af98>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot the histogram for the eastern crossings\n",
    "plt.hist(east)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicting the number of crossing on any Friday in July"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expected crossings on west side of the bridge: 1833\n",
      "Expected crossings on east side of the bridge: 1838\n",
      "Expected combined crossings on both sides of the bridge on a friday in July: 3671\n",
      "95% Confidence Interval: (2642.0866847940047, 4701.605622898303)\n"
     ]
    }
   ],
   "source": [
    "#import math which we use later\n",
    "import math\n",
    "#import the data file\n",
    "data_file2 = open(\"Fremont.csv\", \"r\")\n",
    "\n",
    "#create empty lists for westbound and eastbound bikes\n",
    "date = []\n",
    "west2 = [];\n",
    "east2 = [];\n",
    "\n",
    "#create a list of all items from the data file\n",
    "data_list2 = []\n",
    "for r in data_file2:\n",
    "    data_list2.append(r);\n",
    "    \n",
    "#remove the first element (column header)\n",
    "del data_list2[0];\n",
    "\n",
    "#split the information from our data file into seperate lists for west, east, and date points\n",
    "for jj in range(len(data_list2)):\n",
    "    #strip off the \\n (newline)\n",
    "    data_list2[jj] = data_list2[jj].replace(\"\\n\", \"\");\n",
    "    #make into a list of lists of just numbers\n",
    "    data_list2[jj] = data_list2[jj].split(\",\");\n",
    "    #add data to specific lists for west and east\n",
    "    date.append(str(data_list2[jj][0]))\n",
    "    west2.append(int(data_list2[jj][1]));\n",
    "    east2.append(int(data_list2[jj][2]));\n",
    "    \n",
    "#define the first fridayin the list\n",
    "friString = \"12/25/2015\"\n",
    "\n",
    "#create a list for all the fridays in july\n",
    "julyDates = []\n",
    "julyW = []\n",
    "julyE = []\n",
    "julyAll = []\n",
    "\n",
    "#go through all days to find fridays in july\n",
    "#define a variable to store the index of the first friday in the list\n",
    "firstFridayIndex = 0\n",
    "\n",
    "#find the index of a first friday as a refernce variable\n",
    "while (date[firstFridayIndex] != friString):\n",
    "    firstFridayIndex += 1\n",
    "    \n",
    "#itterate every 7 days and check which month it is\n",
    "for day in range(math.floor(len(date)/7)):\n",
    "    thisDate = date[firstFridayIndex + (day*7)]\n",
    "    thisMonth = thisDate[0] + thisDate[1]\n",
    "    #if the month is july, add the index to a list\n",
    "    if(thisMonth == \"07\"):\n",
    "        julyDates.append(firstFridayIndex + (day*7))\n",
    "    \n",
    "#create the july west and east lists, along with a combined west and east list\n",
    "for dateIndex in range(len(julyDates)):\n",
    "    #put the traffic data into the the west and east lists\n",
    "    julyW.append(west2[julyDates[dateIndex]])\n",
    "    julyE.append(east2[julyDates[dateIndex]])\n",
    "    #append the data for the cummulative crossings\n",
    "    julyAll.append(west2[julyDates[dateIndex]] + east2[julyDates[dateIndex]])\n",
    "\n",
    "#calculate mean of west, east, and the combined lists\n",
    "fridayJulyWestMean = statistics.mean(julyW)\n",
    "fridayJulyEastMean = statistics.mean(julyE)\n",
    "fridayJulyAll = statistics.mean(julyAll)\n",
    "\n",
    "#print the calculated means\n",
    "#use math.floor because you can only have a crossing or not have a crossing, we must round down to make whole numbers\n",
    "print(\"Expected crossings on west side of the bridge:\", math.floor(fridayJulyWestMean))\n",
    "print(\"Expected crossings on east side of the bridge:\", math.floor(fridayJulyEastMean))\n",
    "print(\"Expected combined crossings on both sides of the bridge on a friday in July:\", math.floor(fridayJulyAll))\n",
    "\n",
    "#calculate a 95% confidence interval\n",
    "stdvAll = statistics.stdev(julyAll)\n",
    "minInterval = fridayJulyAll - stdvAll*2\n",
    "maxInterval = fridayJulyAll + stdvAll*2\n",
    "\n",
    "print(\"95% Confidence Interval: (\", minInterval,\", \", maxInterval, \")\",sep=\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "By creating a confidence it in unneccesary to remove outliers because the standard deviation takes outliers into account.  This interval creates range in which we can be 95% confident will contain the true mean of people crossing the fremont bridge on any given Friday in July."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Procedure"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To calculate this confidence interval, I first collected every data point from every Friday within the dataset.  To do this, I defined the first Friday from the set, and collected every 7th point.  From this subset, I next checked the month of every Friday point and created a subset of this set of points that were in the month July.\n",
    "\n",
    "To calculate a prediciton for the number of crossings per day, in both directions, I created a new list with the summation of west and east crossings for each day of the set.\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
